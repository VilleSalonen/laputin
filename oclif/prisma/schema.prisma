generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model File {
  id               Int                @id @default(autoincrement())
  hash             String             @unique(map: "sqlite_autoindex_File_1")
  path             String             @unique(map: "sqlite_autoindex_File_2")
  active           Int
  size             BigInt
  metadata         String
  type             String
  ScreenshotTag    ScreenshotTag[]
  TagsOnFiles      TagsOnFiles[]
  TimecodesOnFiles TimecodesOnFiles[]
}

model ScreenshotFile {
  id   Int   @id @default(autoincrement())
  time Float
}

model ScreenshotTag {
  id     Int   @id @default(autoincrement())
  fileId Int
  time   Float
  File   File  @relation(fields: [fileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Tag    Tag   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ScreenshotTimecode {
  id   Int   @id @default(autoincrement())
  Time Float
}

model Tag {
  id              Int               @id @default(autoincrement())
  name            String            @unique(map: "sqlite_autoindex_Tag_1")
  ScreenshotTag   ScreenshotTag?
  TagsOnFiles     TagsOnFiles[]
  TagsOnTimecodes TagsOnTimecodes[]
}

model TagsOnFiles {
  id     Int  @id @default(autoincrement())
  fileId Int
  tagId  Int
  Tag    Tag  @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  File   File @relation(fields: [fileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([fileId, tagId], map: "sqlite_autoindex_TagsOnFiles_1")
  @@index([tagId], map: "TagsOnFiles_tagId")
  @@index([fileId], map: "TagsOnFiles_fileId")
}

model TagsOnTimecodes {
  id               Int              @id @default(autoincrement())
  timecodeId       Int
  tagId            Int
  Tag              Tag              @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimecodesOnFiles TimecodesOnFiles @relation(fields: [timecodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TimecodesOnFiles {
  id              Int               @id @default(autoincrement())
  fileId          Int
  start           Float
  end             Float
  File            File              @relation(fields: [fileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TagsOnTimecodes TagsOnTimecodes[]
}
